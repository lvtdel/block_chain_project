# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from block_chain_grpc import blockchain_pb2 as block__chain__grpc_dot_blockchain__pb2

GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in block_chain_grpc/blockchain_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class BlockchainServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.get_chain_infor = channel.unary_unary(
                '/blockchain.BlockchainService/get_chain_infor',
                request_serializer=block__chain__grpc_dot_blockchain__pb2.Empty.SerializeToString,
                response_deserializer=block__chain__grpc_dot_blockchain__pb2.ChainInfor.FromString,
                _registered_method=True)
        self.stream_chain = channel.unary_stream(
                '/blockchain.BlockchainService/stream_chain',
                request_serializer=block__chain__grpc_dot_blockchain__pb2.Empty.SerializeToString,
                response_deserializer=block__chain__grpc_dot_blockchain__pb2.Block.FromString,
                _registered_method=True)
        self.add_transaction = channel.unary_unary(
                '/blockchain.BlockchainService/add_transaction',
                request_serializer=block__chain__grpc_dot_blockchain__pb2.Transaction.SerializeToString,
                response_deserializer=block__chain__grpc_dot_blockchain__pb2.Empty.FromString,
                _registered_method=True)
        self.add_block = channel.unary_unary(
                '/blockchain.BlockchainService/add_block',
                request_serializer=block__chain__grpc_dot_blockchain__pb2.Block.SerializeToString,
                response_deserializer=block__chain__grpc_dot_blockchain__pb2.Empty.FromString,
                _registered_method=True)
        self.add_node = channel.unary_unary(
                '/blockchain.BlockchainService/add_node',
                request_serializer=block__chain__grpc_dot_blockchain__pb2.NodeAddress.SerializeToString,
                response_deserializer=block__chain__grpc_dot_blockchain__pb2.NodeAddressList.FromString,
                _registered_method=True)
        self.get_mempool = channel.unary_unary(
                '/blockchain.BlockchainService/get_mempool',
                request_serializer=block__chain__grpc_dot_blockchain__pb2.Empty.SerializeToString,
                response_deserializer=block__chain__grpc_dot_blockchain__pb2.Mempool.FromString,
                _registered_method=True)


class BlockchainServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def get_chain_infor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stream_chain(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def add_transaction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def add_block(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def add_node(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_mempool(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BlockchainServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'get_chain_infor': grpc.unary_unary_rpc_method_handler(
                    servicer.get_chain_infor,
                    request_deserializer=block__chain__grpc_dot_blockchain__pb2.Empty.FromString,
                    response_serializer=block__chain__grpc_dot_blockchain__pb2.ChainInfor.SerializeToString,
            ),
            'stream_chain': grpc.unary_stream_rpc_method_handler(
                    servicer.stream_chain,
                    request_deserializer=block__chain__grpc_dot_blockchain__pb2.Empty.FromString,
                    response_serializer=block__chain__grpc_dot_blockchain__pb2.Block.SerializeToString,
            ),
            'add_transaction': grpc.unary_unary_rpc_method_handler(
                    servicer.add_transaction,
                    request_deserializer=block__chain__grpc_dot_blockchain__pb2.Transaction.FromString,
                    response_serializer=block__chain__grpc_dot_blockchain__pb2.Empty.SerializeToString,
            ),
            'add_block': grpc.unary_unary_rpc_method_handler(
                    servicer.add_block,
                    request_deserializer=block__chain__grpc_dot_blockchain__pb2.Block.FromString,
                    response_serializer=block__chain__grpc_dot_blockchain__pb2.Empty.SerializeToString,
            ),
            'add_node': grpc.unary_unary_rpc_method_handler(
                    servicer.add_node,
                    request_deserializer=block__chain__grpc_dot_blockchain__pb2.NodeAddress.FromString,
                    response_serializer=block__chain__grpc_dot_blockchain__pb2.NodeAddressList.SerializeToString,
            ),
            'get_mempool': grpc.unary_unary_rpc_method_handler(
                    servicer.get_mempool,
                    request_deserializer=block__chain__grpc_dot_blockchain__pb2.Empty.FromString,
                    response_serializer=block__chain__grpc_dot_blockchain__pb2.Mempool.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'blockchain.BlockchainService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('blockchain.BlockchainService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class BlockchainService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def get_chain_infor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/blockchain.BlockchainService/get_chain_infor',
            block__chain__grpc_dot_blockchain__pb2.Empty.SerializeToString,
            block__chain__grpc_dot_blockchain__pb2.ChainInfor.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def stream_chain(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/blockchain.BlockchainService/stream_chain',
            block__chain__grpc_dot_blockchain__pb2.Empty.SerializeToString,
            block__chain__grpc_dot_blockchain__pb2.Block.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def add_transaction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/blockchain.BlockchainService/add_transaction',
            block__chain__grpc_dot_blockchain__pb2.Transaction.SerializeToString,
            block__chain__grpc_dot_blockchain__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def add_block(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/blockchain.BlockchainService/add_block',
            block__chain__grpc_dot_blockchain__pb2.Block.SerializeToString,
            block__chain__grpc_dot_blockchain__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def add_node(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/blockchain.BlockchainService/add_node',
            block__chain__grpc_dot_blockchain__pb2.NodeAddress.SerializeToString,
            block__chain__grpc_dot_blockchain__pb2.NodeAddressList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def get_mempool(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/blockchain.BlockchainService/get_mempool',
            block__chain__grpc_dot_blockchain__pb2.Empty.SerializeToString,
            block__chain__grpc_dot_blockchain__pb2.Mempool.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
